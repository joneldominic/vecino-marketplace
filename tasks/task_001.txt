# Task ID: 1
# Title: Setup Project Repository and Infrastructure
# Status: pending
# Dependencies: None
# Priority: high
# Description: Initialize the project repository with React+Vite frontend and NestJS backend, configure CI/CD pipeline, and set up Docker files.
# Details:
Create a monorepo structure with separate folders for frontend and backend. Frontend: Initialize with Vite, React, Zustand, and TanStack Query. Backend: Set up NestJS with MongoDB and Redis connections. Configure ESLint, Prettier, and Jest. Create Docker files for local development and production. Set up GitHub Actions for CI/CD pipeline with linting and testing. Configure AWS Elastic Beanstalk, S3, and CloudFront deployment scripts.

# Test Strategy:
Verify CI pipeline runs successfully with passing linting and tests. Ensure Docker containers build and run locally. Test deployment scripts with a staging environment.

# Subtasks:
## 1. Initialize Monorepo Structure [pending]
### Dependencies: None
### Description: Create the base monorepo structure with separate directories for frontend and backend, and set up shared configuration files.
### Details:
1. Create a new repository on GitHub
2. Initialize the local repository with git
3. Create the following directory structure:
   - `/frontend`: For React+Vite application
   - `/backend`: For NestJS application
   - `/shared`: For shared types and utilities
4. Set up root package.json with workspaces configuration
5. Create root-level .gitignore, README.md, and LICENSE files
6. Configure root-level tsconfig.json with path aliases
7. Set up initial commit and push to GitHub
8. Test by ensuring the repository structure is properly created and accessible

## 2. Set Up Frontend with Vite, React, Zustand, and TanStack Query [pending]
### Dependencies: 1.1
### Description: Initialize and configure the frontend application with Vite, React, TypeScript, Zustand for state management, and TanStack Query for data fetching.
### Details:
1. Navigate to `/frontend` directory
2. Initialize a new Vite project with React and TypeScript template
3. Install and configure dependencies:
   - Zustand for state management
   - TanStack Query for API data fetching
   - React Router for navigation
   - Axios for HTTP requests
4. Set up the basic application structure:
   - Create `/src/components`, `/src/pages`, `/src/hooks`, `/src/store`, and `/src/api` directories
   - Set up a basic Zustand store
   - Configure TanStack Query client
5. Create a simple test component to verify the setup
6. Test by running the development server and ensuring the application renders correctly

## 3. Set Up Backend with NestJS, MongoDB, and Redis [pending]
### Dependencies: 1.1
### Description: Initialize and configure the backend application with NestJS, TypeScript, MongoDB for database, and Redis for caching.
### Details:
1. Navigate to `/backend` directory
2. Initialize a new NestJS project using the Nest CLI
3. Install and configure dependencies:
   - MongoDB driver and Mongoose for database operations
   - Redis client for caching
   - Class-validator and class-transformer for DTO validation
   - Passport and JWT for authentication
4. Set up environment configuration with dotenv
5. Create database connection modules for MongoDB and Redis
6. Implement health check endpoint
7. Set up basic module structure with controllers and services
8. Test by running the server and verifying the health check endpoint works

## 4. Configure Code Quality Tools [pending]
### Dependencies: 1.2, 1.3
### Description: Set up and configure ESLint, Prettier, and Jest for both frontend and backend to ensure code quality and testing capabilities.
### Details:
1. Set up ESLint in root directory with appropriate configurations for both frontend and backend
2. Configure Prettier for consistent code formatting
3. Set up Jest for testing in both frontend and backend:
   - Configure Jest for React components in frontend
   - Set up Jest for NestJS in backend
4. Create pre-commit hooks with husky and lint-staged
5. Add npm scripts in root package.json for linting and testing all workspaces
6. Create sample tests for both frontend and backend
7. Test by running lint and test commands from the root directory

## 5. Create Docker Configuration [pending]
### Dependencies: 1.2, 1.3
### Description: Set up Docker and Docker Compose files for local development and production environments.
### Details:
1. Create Dockerfile for frontend:
   - Development version with hot reloading
   - Production version with build optimization
2. Create Dockerfile for backend:
   - Development version with hot reloading
   - Production version with optimized build
3. Set up Docker Compose files:
   - docker-compose.dev.yml for local development with MongoDB and Redis services
   - docker-compose.prod.yml for production setup
4. Create .dockerignore files for both frontend and backend
5. Add npm scripts for Docker operations
6. Test by building and running containers locally, ensuring both frontend and backend services are accessible

## 6. Set Up CI/CD Pipeline with AWS Deployment [pending]
### Dependencies: 1.4, 1.5
### Description: Configure GitHub Actions for CI/CD pipeline and set up deployment scripts for AWS services including Elastic Beanstalk, S3, and CloudFront.
### Details:
1. Create GitHub Actions workflow files:
   - Lint and test workflow for pull requests
   - Build and deploy workflow for main branch
2. Set up AWS deployment configuration:
   - Configure Elastic Beanstalk for backend deployment
   - Set up S3 bucket for frontend static files
   - Configure CloudFront distribution for frontend CDN
3. Create deployment scripts:
   - Backend deployment to Elastic Beanstalk
   - Frontend build and upload to S3
   - CloudFront cache invalidation
4. Set up GitHub repository secrets for AWS credentials
5. Create infrastructure as code using AWS CDK or Terraform (optional)
6. Test the CI/CD pipeline by making a small change, pushing to GitHub, and verifying the automated deployment

